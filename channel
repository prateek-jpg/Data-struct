#include<bits/stdc++.h>

using namespace std;

int binary_search(vector<int>& arr, int l, int r, int key){
	if(l>r)
		   return 0;
    int m = (l+r)/2;
    if(arr[m]== key)
   		return 1;
	else if(arr[m]>key)
		return binary_search(arr, l, m-1, key);
	else
		return binary_search(arr, m+1, r, key);
}

int linear_search(vector<int>& arr, int skip, int key){
	vector<int>::iterator ptr = arr.begin() +skip;
	while(ptr<arr.end()){
		if(*ptr== key)
 		    return ptr-arr.begin();
		ptr++;
	}
}

void maxProfitDay(){
	 int n,d;	cin >> n >> d;
	 vector<int> share(n, 0), _free(n, 1);
	 for(int i= 0; i<n; i++)
	     cin >> share[i];
	     
	 while(d--){
	 	int target, ind=0, min_ind= INT_MAX, ind_s= INT_MIN; cin >> target;
	 	for(int i=0; i<n; i++){
 			if(binary_search(share, i+1, n-1, share[i]+target)){
 				if(_free[i]){
	 				ind = linear_search(share, i+1, share[i]+target);
	 				if(ind<= min_ind){
	 					min_ind= ind;
	 					ind_s= (ind_s< i) ?i :ind_s; 
					 }
				}
		    }
		}
		 if(min_ind != INT_MAX){
			_free[ind_s]= 0;
   			if(d)
 	 		    printf("%d %d,", ind_s+1, min_ind+1);
			else
				printf("%d %d\n",ind_s+1, min_ind+1);
		 }
	 }
}

int main(void){
	
	maxProfitDay();
	return 0; 
}
